#! /usr/bin/env python3

from optparse import OptionParser


def find_nexus_modules():
    import sys
    nexus_lib = os.path.abspath(os.path.join(__file__,'..','..','lib'))
    assert(os.path.exists(nexus_lib))
    sys.path.append(nexus_lib)
#end def find_nexus_modules


def import_nexus_module(module_name):
    import importlib
    return importlib.import_module(module_name)
#end def import_nexus_module


# Load Nexus modules
try:
    # Attempt specialized path-based imports.
    #  (The executable should still work even if Nexus is not installed)
    find_nexus_modules()

    versions = import_nexus_module('versions')
    nexus_version = versions.nexus_version
    del versions

    generic = import_nexus_module('generic')
    obj = generic.obj
    del generic

    developer = import_nexus_module('developer')
    DevBase     = developer.DevBase
    error       = developer.error
    ci          = developer.ci
    unavailable = developer.unavailable
    del developer

    memory = import_nexus_module('memory')

    observables = import_nexus_module('observables')
    ChargeDensity = observables.ChargeDensity
except:
    from versions import nexus_version
    from generic import obj
    from developer import DevBase,error,ci,unavailable
    import memory
#end try


# External imports
try:
    import numpy as np
except:
    np = unavailable('numpy')
#end try


class QDRBase(DevBase):
    name    = 'qdens-radial'
    verbose = None
    options = obj()
    parser  = None
    
    def vlog(self,*args,**kwargs):
        if self.verbose:
            DevBase.log(self,*args,**kwargs)
        #end if
    #end def vlog

    def vmlog(self,*args,**kwargs):
        args = list(args)+[' (memory %3.2f MB)'%(memory.resident(children=True)/1e6)]
        self.vlog(*args,**kwargs)
    #end def vmlog

    def help(self):
        self.log('\n'+self.parser.format_help().strip()+'\n')
    #end def help

    def exit(self):
        self.vlog('\n{0} finished\n'.format(self.name))
        exit()
    #end def exit

    def error(self,msg,loc=None):
        if loc is None:
            loc = self.name
        #end if
        error(msg,loc)
        #self.exit()
    #end def error

    # options accessor functions
    # PERHAPS A FUNCTION TO DO SOMETHING ELSE??
    #def get_cell(self):
    #    if opt.structure is not None:
    #        cell = opt.structure.axes
    #    else:
    #        cell = opt.cell
    #    #end if
    #    return cell
    ##end def get_cell
#end class QDBase


class QMCDensityRadialProcessor(QDRBase):
    def __init__(self):
        self.file_list = []
        self.stat_files = obj()
    #end def __init__

    def read_command_line(self):
        usage = '''usage: %prog [options] [file(s)]'''
        parser = OptionParser(usage=usage,add_help_option=False,version='%prog {}.{}.{}'.format(*nexus_version))
        parser.add_option('-h','--help',dest='help',
                          action='store_true',default=False,
                          help='Print help information and exit (default=%default).'
                          )
        parser.add_option('-v','--verbose',dest='verbose',
                          action='store_true',default=False,
                          help='Print detailed information (default=%default).'
                          )

        options,files_in = parser.parse_args()

        QDRBase.parser = parser
        QDRBase.options.transfer_from(options.__dict__)

        # Command line options as Nexus obj() data structure
        opt = self.options

        QDRBase.verbose = opt.verbose

        if opt.help or len(files_in)==0:
            self.help()
            self.exit()
        #end if

        self.vlog('\n{0} initializing'.format(self.name))
        self.vlog('\noptions provided:')
        self.vlog(str(self.options))
    #end def read_command_line(self)

    def process(self):
        opt = self.options
    #end def process(self)

#end class QMCDensityRadialProcessor

if __name__=='__main__':
    qdensradial = QMCDensityRadialProcessor()

    qdensradial.read_command_line()

    qdensradial.process()

    qdensradial.exit()
#end if



